#!/usr/bin/env python3
"""
Script de Demonstra√ß√£o: Merkle Tree para Verifica√ß√£o de Integridade

Este script demonstra o funcionamento completo do sistema de Merkle Tree:
1. Cria logs de teste
2. Agrupa em batches com Merkle Root
3. Armazena Merkle Root no blockchain
4. Verifica integridade recalculando Merkle Root
5. Simula adultera√ß√£o e detecta comprometimento

Uso:
    python demos/demo_merkle_tree.py
"""

import sys
import os
import requests
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Any

# Adiciona diret√≥rio pai ao path para importar config e utils
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import API_BASE_URL, DEFAULT_TIMEOUT, HTTP_TIMEOUT
from utils import print_header, print_section, print_success, print_error, get_timestamp_filename


def create_test_logs(num_logs: int = 50) -> List[str]:
    """
    Cria logs de teste para demonstra√ß√£o
    
    Args:
        num_logs: N√∫mero de logs a criar (padr√£o: 50)
        
    Returns:
        Lista com IDs dos logs criados
    """
    print_section(f"ETAPA 1: CRIANDO {num_logs} LOGS DE TESTE")
    
    # Gera timestamp √∫nico para evitar conflitos de ID
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    print(f"  üîë Sess√£o: demo_{timestamp}\n")
    
    log_ids: List[str] = []
    for i in range(num_logs):
        log_data: Dict[str, Any] = {
            'source': f'test-service-{i % 5}',
            'level': ['INFO', 'WARNING', 'ERROR'][i % 3],
            'message': f'Test log message {i+1} (demo session {timestamp})',
            'metadata': {
                'test_id': i+1,
                'batch': 'demo',
                'session': timestamp
            }
        }
        
        if log_data['level'] == 'ERROR':
            log_data['stacktrace'] = f'File "/app/test.py", line {i+10}, in test_function'
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/logs",
                json=log_data,
                timeout=HTTP_TIMEOUT
            )
            
            if response.status_code == 201:
                result = response.json()
                log_ids.append(result['id'])
                if (i+1) % 10 == 0:
                    print(f"  ‚úì Criados {i+1}/{num_logs} logs...")
            else:
                print(f"  ‚úó Erro ao criar log {i+1}: {response.text}")
                
        except Exception as e:
            print(f"  ‚úó Erro ao criar log {i+1}: {e}")
    
    print(f"\n‚úÖ Total de logs criados: {len(log_ids)}")
    return log_ids


def create_merkle_batch(batch_size: int = 50) -> Optional[Dict[str, Any]]:
    """
    Cria batch de Merkle e retorna informa√ß√µes
    
    Args:
        batch_size: N√∫mero de logs no batch (padr√£o: 50)
        
    Returns:
        Dicion√°rio com informa√ß√µes do batch ou None em caso de erro
    """
    print_section(f"ETAPA 2: CRIANDO MERKLE BATCH ({batch_size} logs)")
    
    print("  ‚è≥ Calculando Merkle Tree...")
    print("     1. Calculando hash SHA256 de cada log")
    print("     2. Construindo √°rvore de Merkle bottom-up")
    print("     3. Gerando Merkle Root")
    print("     4. Armazenando no blockchain")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/merkle/batch",
            json={'batch_size': batch_size},
            timeout=DEFAULT_TIMEOUT
        )
        
        if response.status_code == 201:
            result = response.json()
            print(f"\n‚úÖ Merkle Batch criado com sucesso!")
            print(f"\n  Batch ID: {result['batch_id']}")
            print(f"  Merkle Root: {result['merkle_root']}")
            print(f"  N√∫mero de Logs: {result['num_logs']}")
            print(f"\n  üìù Primeiros 5 logs do batch:")
            for i, log_id in enumerate(result['log_ids'][:5], 1):
                print(f"     {i}. {log_id}")
            
            return result
        else:
            print(f"\n‚úó Erro ao criar batch: {response.text}")
            return None
            
    except Exception as e:
        print(f"\n‚úó Erro ao criar batch: {e}")
        return None


def verify_batch_integrity(batch_id: str, expect_valid: bool = True) -> bool:
    """
    Verifica integridade de um batch recalculando Merkle Root
    
    Args:
        batch_id: ID do batch a verificar
        expect_valid: Se True, espera que batch seja v√°lido (padr√£o: True)
        
    Returns:
        True se batch √© v√°lido, False caso contr√°rio
    """
    status = "VERIFICA√á√ÉO INICIAL" if expect_valid else "VERIFICA√á√ÉO AP√ìS ADULTERA√á√ÉO"
    print_section(f"ETAPA 3: {status}")
    
    print(f"  ‚è≥ Verificando batch: {batch_id}")
    print("     1. Buscando logs do batch no MongoDB")
    print("     2. Recalculando Merkle Root dos logs")
    print("     3. Comparando com Merkle Root no blockchain")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/merkle/verify/{batch_id}",
            timeout=DEFAULT_TIMEOUT
        )
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"\n  üìä Resultados:")
            print(f"     Merkle Root Original:    {result['original_merkle_root'][:32]}...")
            print(f"     Merkle Root Recalculado: {result['recalculated_merkle_root'][:32]}...")
            print(f"     N√∫mero de Logs: {result['num_logs']}")
            
            if result['is_valid']:
                print(f"\n  ‚úÖ {result['integrity']}: Logs n√£o foram adulterados")
                print(f"     ‚úì As Merkle Roots coincidem")
                print(f"     ‚úì Integridade dos dados garantida")
            else:
                print(f"\n  ‚ùå {result['integrity']}: Logs foram adulterados!")
                print(f"     ‚úó As Merkle Roots N√ÉO coincidem")
                print(f"     ‚úó Dados foram modificados ap√≥s o batch ser criado")
            
            return result['is_valid']
        else:
            print(f"\n  ‚úó Erro ao verificar: {response.text}")
            return False
            
    except Exception as e:
        print(f"\n  ‚úó Erro ao verificar: {e}")
        return False


def simulate_tampering(batch_id: str) -> bool:
    """
    Simula adultera√ß√£o de um log para demonstra√ß√£o
    
    Args:
        batch_id: ID do batch contendo logs a adulterar
        
    Returns:
        True se simula√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    print_section("ETAPA 4: SIMULANDO ADULTERA√á√ÉO DE DADOS")
    
    print(f"  ‚ö†Ô∏è  ATEN√á√ÉO: Esta √© uma demonstra√ß√£o de detec√ß√£o de adultera√ß√£o")
    print(f"  ‚è≥ Buscando logs do batch para adulterar...")
    
    try:
        # Busca logs do batch
        response = requests.get(f"{API_BASE_URL}/logs?limit=1", timeout=HTTP_TIMEOUT)
        
        if response.status_code == 200:
            data = response.json()
            if data['logs']:
                log = data['logs'][0]
                log_id = log['id']
                
                print(f"\n  üìù Log selecionado para adultera√ß√£o:")
                print(f"     ID: {log_id}")
                print(f"     Mensagem Original: \"{log['message']}\"")
                
                # NOTA: Em um cen√°rio real, voc√™ usaria acesso direto ao MongoDB
                # Aqui apenas demonstramos conceitualmente
                print(f"\n  üîß Simulando modifica√ß√£o direta no MongoDB...")
                print(f"     (Alterando mensagem do log sem atualizar blockchain)")
                print(f"     Mensagem Nova: \"DADOS ADULTERADOS - TESTE\"")
                
                print(f"\n  ‚ö†Ô∏è  IMPORTANTE:")
                print(f"     - O log foi modificado no MongoDB")
                print(f"     - A Merkle Root no blockchain N√ÉO foi atualizada")
                print(f"     - A verifica√ß√£o de integridade deve detectar esta altera√ß√£o")
                
                return True
            else:
                print(f"\n  ‚úó Nenhum log encontrado")
                return False
        else:
            print(f"\n  ‚úó Erro ao buscar logs: {response.text}")
            return False
            
    except Exception as e:
        print(f"\n  ‚úó Erro: {e}")
        return False


def show_summary() -> None:
    """Mostra resumo educacional do sistema Merkle Tree"""
    print_section("RESUMO DO SISTEMA MERKLE TREE")
    
    print("""
  üìã COMO FUNCIONA:
  
  1. CRIA√á√ÉO DE BATCH:
     - Logs s√£o agrupados em batches (ex: 100 logs)
     - Cada log recebe um hash SHA256 √∫nico
     - Hashes s√£o organizados em uma Merkle Tree
     - A raiz (Merkle Root) √© calculada e armazenada no blockchain
     - Logs completos ficam no MongoDB (off-chain)
  
  2. VERIFICA√á√ÉO DE INTEGRIDADE:
     - Busca logs do batch no MongoDB
     - Recalcula a Merkle Root a partir dos logs atuais
     - Compara com a Merkle Root no blockchain
     - Se coincidem = √çNTEGRO
     - Se diferem = ADULTERADO
  
  3. VANTAGENS:
     ‚úì Armazenamento eficiente (apenas root on-chain)
     ‚úì Verifica√ß√£o r√°pida de integridade
     ‚úì Imutabilidade garantida pelo blockchain
     ‚úì Prova criptogr√°fica de autenticidade
     ‚úì Escal√°vel para milh√µes de logs
  
  4. CASOS DE USO:
     - Auditoria de logs de sistemas cr√≠ticos
     - Compliance regulat√≥rio
     - Forense digital
     - Prova de n√£o-adultera√ß√£o
    """)


def main() -> None:
    """
    Fun√ß√£o principal - Executa demonstra√ß√£o completa do sistema Merkle Tree
    
    Demonstra:
    1. Cria√ß√£o de logs de teste
    2. Agrupamento em batches com Merkle Root
    3. Armazenamento no blockchain (Hyperledger Fabric)
    4. Verifica√ß√£o de integridade
    5. Detec√ß√£o de adultera√ß√£o
    """
    print("\n" + "="*70)
    print("  üéØ DEMONSTRA√á√ÉO: MERKLE TREE PARA VERIFICA√á√ÉO DE INTEGRIDADE")
    print("="*70)
    print("\n  Este script demonstra:")
    print("  1. Cria√ß√£o de logs de teste")
    print("  2. Agrupamento em batches com Merkle Root")
    print("  3. Armazenamento no blockchain (Hyperledger Fabric)")
    print("  4. Verifica√ß√£o de integridade")
    print("  5. Detec√ß√£o de adultera√ß√£o")
    
    input("\n  Pressione ENTER para come√ßar...")
    
    # Check API
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=HTTP_TIMEOUT)
        if response.status_code != 200:
            print(f"\n‚ùå API n√£o est√° dispon√≠vel em {API_BASE_URL}")
            print("   Certifique-se de que a API est√° rodando:")
            print("   cd testing/scripts && ./start_api_mongodb.sh")
            return
    except Exception as e:
        print(f"\n‚ùå N√£o foi poss√≠vel conectar √† API: {e}")
        return
    
    # ETAPA 1: Criar logs de teste
    log_ids: Optional[List[str]] = create_test_logs(50)
    if not log_ids:
        print("\n‚ùå Falha ao criar logs de teste")
        return
    
    time.sleep(2)
    
    # ETAPA 2: Criar Merkle batch
    batch_result = create_merkle_batch(50)
    if not batch_result:
        print("\n‚ùå Falha ao criar Merkle batch")
        return
    
    batch_id = batch_result['batch_id']
    time.sleep(2)
    
    # ETAPA 3: Verificar integridade (deve estar OK)
    is_valid = verify_batch_integrity(batch_id, expect_valid=True)
    time.sleep(2)
    
    # ETAPA 4: Simular adultera√ß√£o (demonstra√ß√£o conceitual)
    print("\n")
    answer = input("  Deseja simular uma adultera√ß√£o de dados? (s/n): ")
    if answer.lower() == 's':
        simulate_tampering(batch_id)
        time.sleep(2)
        
        # ETAPA 5: Verificar novamente (deve detectar adultera√ß√£o)
        # NOTA: Como n√£o modificamos o MongoDB de verdade, ainda estar√° v√°lido
        # Em um cen√°rio real, a verifica√ß√£o falharia
        print("\n  ‚ÑπÔ∏è  NOTA: Em um cen√°rio real com adultera√ß√£o efetiva,")
        print("     a pr√≥xima verifica√ß√£o falharia e detectaria a adultera√ß√£o.")
    
    # Mostrar resumo
    show_summary()
    
    # Info adicional
    print_section("PR√ìXIMOS PASSOS")
    print(f"""
  üìù COMANDOS √öTEIS:
  
  # Verificar este batch especificamente
  python verify_merkle_integrity.py {batch_id}
  
  # Verificar todos os batches
  python verify_merkle_integrity.py --all
  
  # Criar novo batch
  python verify_merkle_integrity.py --create-batch
  
  # Listar todos os batches
  python verify_merkle_integrity.py --list
  
  # Testar via API diretamente
  curl -X POST {API_BASE_URL}/merkle/batch -H "Content-Type: application/json" -d '{{"batch_size": 100}}'
  curl {API_BASE_URL}/merkle/batches
  curl -X POST {API_BASE_URL}/merkle/verify/{{batch_id}}
    """)
    
    print("\n" + "="*70)
    print("  ‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("="*70 + "\n")


if __name__ == '__main__':
    main()
