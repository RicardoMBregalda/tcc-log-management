#!/bin/bash
###############################################################################
# Script de Execu√ß√£o - Testes de Resili√™ncia
# 
# Este script facilita a execu√ß√£o dos testes de resili√™ncia,
# verificando pr√©-requisitos e fornecendo op√ß√µes de configura√ß√£o.
#
# Uso: ./run_resilience_tests.sh [op√ß√µes]
#
# Autor: Ricardo M Bregalda
# Data: 2025-10-14
###############################################################################

set -e  # Exit on error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rios
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TESTS_DIR="$PROJECT_ROOT/testing/tests"
RESULTS_DIR="$PROJECT_ROOT/testing/results"

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë       TESTES DE RESILI√äNCIA - TCC LOG MANAGEMENT        ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

###############################################################################
# FUN√á√ïES
###############################################################################

check_docker() {
    echo -e "${YELLOW}üîç Verificando Docker...${NC}"
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o encontrado!${NC}"
        echo "   Instale Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! docker ps &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando!${NC}"
        echo "   Inicie o Docker daemon e tente novamente."
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Docker OK${NC}"
}

check_containers() {
    echo -e "${YELLOW}üîç Verificando containers necess√°rios...${NC}"
    
    local required_containers=(
        "peer0.org1.example.com"
        "orderer.example.com"
        "mongodb"
        "postgres-primary"
        "postgres-standby"
    )
    
    local missing_containers=()
    
    for container in "${required_containers[@]}"; do
        if ! docker ps --format '{{.Names}}' | grep -q "^${container}$"; then
            missing_containers+=("$container")
        fi
    done
    
    if [ ${#missing_containers[@]} -gt 0 ]; then
        echo -e "${RED}‚ùå Containers n√£o encontrados:${NC}"
        for container in "${missing_containers[@]}"; do
            echo "   - $container"
        done
        echo ""
        echo -e "${YELLOW}üí° Inicie os servi√ßos com:${NC}"
        echo "   cd hybrid-architecture/fabric-network"
        echo "   docker-compose up -d"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Todos os containers est√£o rodando${NC}"
}

check_api() {
    echo -e "${YELLOW}üîç Verificando API...${NC}"
    
    local api_url="${API_HOST:-localhost}:${API_PORT:-5001}"
    
    if curl -s "http://${api_url}/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API respondendo em http://${api_url}${NC}"
    else
        echo -e "${RED}‚ùå API n√£o est√° respondendo em http://${api_url}${NC}"
        echo ""
        echo -e "${YELLOW}üí° Verifique:${NC}"
        echo "   - API Flask est√° rodando?"
        echo "   - Porta correta (padr√£o: 5001)?"
        echo "   - Firewall bloqueando conex√£o?"
        exit 1
    fi
}

check_python() {
    echo -e "${YELLOW}üîç Verificando Python...${NC}"
    
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python3 n√£o encontrado!${NC}"
        exit 1
    fi
    
    local python_version=$(python3 --version | cut -d' ' -f2)
    echo -e "${GREEN}‚úÖ Python ${python_version}${NC}"
}

show_menu() {
    echo ""
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BLUE}  OP√á√ïES DE TESTE${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    echo "  1) Executar TODOS os testes (recomendado)"
    echo "  2) Testar apenas queda de Peer Fabric"
    echo "  3) Testar apenas queda de Ordering Service"
    echo "  4) Testar apenas queda de MongoDB"
    echo "  5) Testar apenas Failover PostgreSQL"
    echo "  6) Testar apenas Isolamento de rede"
    echo "  7) Executar modo interativo (Python)"
    echo "  8) Ver resultados anteriores"
    echo "  0) Sair"
    echo ""
}

run_all_tests() {
    echo -e "${GREEN}üöÄ Executando TODOS os testes de resili√™ncia...${NC}"
    echo ""
    
    cd "$TESTS_DIR"
    python3 test_resilience.py
    
    show_results
}

run_single_test() {
    local test_name="$1"
    echo -e "${GREEN}üöÄ Executando teste: ${test_name}${NC}"
    echo ""
    
    cd "$TESTS_DIR"
    python3 -c "
from test_resilience import ResilienceTest
tester = ResilienceTest()
tester.${test_name}()
"
}

show_results() {
    echo ""
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BLUE}  RESULTADOS${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    
    if [ -f "$RESULTS_DIR/resilience_report.md" ]; then
        echo -e "${GREEN}üìÑ Relat√≥rio Markdown:${NC}"
        echo "   $RESULTS_DIR/resilience_report.md"
        echo ""
        
        # Mostrar resumo
        if command -v head &> /dev/null; then
            head -n 20 "$RESULTS_DIR/resilience_report.md"
            echo ""
            echo "   ... (veja arquivo completo para detalhes)"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum resultado encontrado ainda${NC}"
    fi
    
    if [ -f "$RESULTS_DIR/resilience_report.json" ]; then
        echo ""
        echo -e "${GREEN}üìä Relat√≥rio JSON:${NC}"
        echo "   $RESULTS_DIR/resilience_report.json"
    fi
}

###############################################################################
# VERIFICA√á√ïES PR√â-TESTE
###############################################################################

echo -e "${YELLOW}üîç Executando verifica√ß√µes pr√©-teste...${NC}"
echo ""

check_docker
check_python
check_containers
check_api

echo ""
echo -e "${GREEN}‚úÖ Todas as verifica√ß√µes passaram!${NC}"

###############################################################################
# MENU INTERATIVO
###############################################################################

while true; do
    show_menu
    
    read -p "Escolha uma op√ß√£o [0-8]: " choice
    
    case $choice in
        1)
            run_all_tests
            ;;
        2)
            run_single_test "test_peer_failure"
            ;;
        3)
            run_single_test "test_orderer_failure"
            ;;
        4)
            run_single_test "test_mongodb_failure"
            ;;
        5)
            run_single_test "test_postgres_failover"
            ;;
        6)
            run_single_test "test_network_isolation"
            ;;
        7)
            echo -e "${GREEN}üêç Iniciando modo interativo Python...${NC}"
            cd "$TESTS_DIR"
            python3 -i -c "from test_resilience import ResilienceTest; tester = ResilienceTest(); print('Use: tester.test_peer_failure(), etc')"
            ;;
        8)
            show_results
            ;;
        0)
            echo ""
            echo -e "${BLUE}üëã At√© logo!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
            ;;
    esac
    
    echo ""
    read -p "Pressione ENTER para continuar..."
done
