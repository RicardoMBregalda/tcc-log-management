services:
  postgres-primary:
    image: postgres:14
    container_name: postgres-primary
    environment:
      - POSTGRES_USER=logadmin
      - POSTGRES_PASSWORD=logpassword
      - POSTGRES_DB=logdb
      - PGDATA=/var/lib/postgresql/data/pgdata
      
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
      - ./scripts/init-primary-db.sh:/docker-entrypoint-initdb.d/init-primary-db.sh
      - ./scripts/init-logdb.sql:/docker-entrypoint-initdb.d/init-logdb.sql 

    ports:
      - "5432:5432" # Expõe a porta do primário para o host
    # Comandos para habilitar a replicação no servidor primário
    command: >
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c archive_mode=on
      -c archive_command='cd .'
    networks:
      - log-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logadmin -d logdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-standby:
    image: postgres:14
    container_name: postgres-standby
    environment:
      - POSTGRES_USER=logadmin
      - POSTGRES_PASSWORD=logpassword
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-standby-data:/var/lib/postgresql/data/pgdata
      - ./scripts/init-standby.sh:/docker-entrypoint-initdb.d/init-standby.sh
    ports:
      - "5433:5432" # Expõe o standby em uma porta diferente para evitar conflito
    networks:
      - log-net
    # O standby depende da saúde do primário para iniciar
    depends_on:
      postgres-primary:
        condition: service_healthy
    # Executa nosso script customizado ao invés do comando padrão
    entrypoint: /docker-entrypoint-initdb.d/init-standby.sh

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://logadmin:logpassword@postgres-primary:5432/logdb?sslmode=disable
    depends_on:
      - postgres-primary
    networks:
      - log-net
    ports:
      - "9187:9187"

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - postgres-exporter
    networks:
      - log-net
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.2.2
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./monitoring/grafana/provisioning/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - log-net
    ports:
      - "3000:3000"

networks:
  log-net:
    external: true
    name: tcc_log_network

volumes:
  postgres-data:
  postgres-standby-data:
  prometheus-data:
  grafana-storage: