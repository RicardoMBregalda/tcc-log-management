networks:
  log-net:
    name: tcc_log_network
    external: true

services:
  postgres-primary:
    image: postgres:15
    container_name: postgres-primary
    environment:
      - POSTGRES_USER=loguser
      - POSTGRES_PASSWORD=logpass
      - POSTGRES_DB=logdb
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./scripts/init-primary-db.sh:/docker-entrypoint-initdb.d/init-primary-db.sh
      - ./scripts/1-init-logdb.sql:/docker-entrypoint-initdb.d/1-init-logdb.sql
    networks:
      - log-net
    restart: unless-stopped
    command: >
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on

  postgres-standby:
    image: postgres:15
    container_name: postgres-standby
    environment:
      - POSTGRES_USER=loguser
      - POSTGRES_PASSWORD=logpass
      - POSTGRES_DB=logdb
    ports:
      - "5433:5432"
    volumes:
      - postgres-standby-data:/var/lib/postgresql/data
    networks:
      - log-net
    depends_on:
      - postgres-primary
    restart: unless-stopped
    entrypoint: >
      bash -c "
      echo 'Aguardando primary ficar disponível...';
      until PGPASSWORD=logpass pg_isready -h postgres-primary -p 5432 -U loguser; do
        echo 'Aguardando...';
        sleep 5;
      done;
      
      if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
        echo 'Configurando replicação...';
        rm -rf /var/lib/postgresql/data/*;
        PGPASSWORD=logpass pg_basebackup -h postgres-primary -U loguser -D /var/lib/postgresql/data -Fp -Xs -P -R;
        chown -R postgres:postgres /var/lib/postgresql/data;
        chmod 0700 /var/lib/postgresql/data;
        echo 'Replicação configurada!';
      fi;
      
      echo 'Iniciando PostgreSQL Standby...';
      exec docker-entrypoint.sh postgres;
      "


  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus-traditional
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    volumes:
      - prometheus-traditional-data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    networks:
      - log-net
    ports:
      - "9090:9090"
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor-traditional
    privileged: true
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8081:8080"
    networks:
      - log-net
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter-traditional
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    ports:
      - "9101:9100"
    networks:
      - log-net
    restart: unless-stopped

  postgres-exporter-primary:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter-primary
    environment:
      - DATA_SOURCE_NAME=postgresql://loguser:logpass@postgres-primary:5432/logdb?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    ports:
      - "9187:9187"
    volumes:
      - ./monitoring/prometheus/postgres-queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - log-net
    depends_on:
      - postgres-primary
    restart: unless-stopped

  postgres-exporter-standby:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter-standby
    environment:
      - DATA_SOURCE_NAME=postgresql://loguser:logpass@postgres-standby:5432/logdb?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    ports:
      - "9188:9187"
    volumes:
      - ./monitoring/prometheus/postgres-queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - log-net
    depends_on:
      - postgres-standby
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.2
    container_name: grafana-traditional
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-traditional-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./monitoring/grafana/provisioning/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - log-net
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  postgres-primary-data:
  postgres-standby-data:
  prometheus-traditional-data:
  grafana-traditional-storage:
